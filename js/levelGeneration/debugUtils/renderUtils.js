/**
 * Functions to render the world generated by levelGeneration.js"
 */

CanvasWidth = 560;
CanvasHeight = 560;
BlockSize = CanvasHeight / 10;
MapHeight = 10;
MapWidth = 10;



function renderGraph(mst, locs, ctx) {
    var margin = BlockSize * .15;
    ctx.fillStyle = 'red';
    ctx.strokeStyle = 'blue';
    for (var i = 0; i < locs.length; i++) {
        var x1 = locs[i].x * BlockSize + margin,
            y1 = locs[i].y * BlockSize + margin;
        ctx.beginPath();
        ctx.rect(x1, y1, BlockSize - 2 * margin, BlockSize - 2 * margin);
        ctx.stroke();
        ctx.fill();
    }
    ctx.lineWidth = .6;
    for (var i = 0;i < mst.length; i++) {
        var x1 = locs[mst[i].start].x * BlockSize + .5 * BlockSize,
            y1 = locs[mst[i].start].y * BlockSize + .5 * BlockSize;
            x2 = locs[mst[i].dest].x * BlockSize + .5 * BlockSize,
            y2 = locs[mst[i].dest].y * BlockSize + .5 * BlockSize;

        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
    }
}

function renderMap(roomMap, ctx) {
    ctx.fillStyle = 'red';
    ctx.strokeStyle = 'blue';
    for (var i = 0; i < roomMap.length; i++) {
        for (var j = 0; j < roomMap[i].length; j++) {
            if (roomMap[j][i] != 1) continue;
                        ctx.beginPath();
            ctx.rect(i * BlockSize, j * BlockSize, BlockSize, BlockSize);
            ctx.stroke();
            ctx.fill();
            ctx.closePath();
        }
    }
}

function renderRooms(world, ctx) {
    labelAxis(ctx);
    world.rooms.forEach(function(room) {
        room.render(ctx);
    });
    return;
}

function renderWindows(world, ctx) {
    world.windows.forEach(function(windoh) {
        windoh.render(ctx);
    });
}

function renderDoors(world, ctx) {
    world.doors.forEach(function(door) {
        door.render(ctx);
    });
}

function renderMultiRooms(world, ctx) {
    world.multiRoomObjs.forEach(function(obj) {
        console.log('trying to render: ' ,obj);
        obj.render(ctx);
    });
}

function labelAxis(ctx) {
    ctx.rect(BlockSize,BlockSize, CanvasWidth, CanvasHeight);
    ctx.fillStyle = "white";
    ctx.fill();

    ctx.font = "12px Georgia";
    ctx.fillStyle = "black";
    for (var x = 0; x < MapWidth; x++) {
        ctx.fillText(x, x * BlockSize + .5 * BlockSize, .5 * BlockSize);
    }
    for (var y = 1; y < MapHeight; y++) {
        ctx.fillText(y, .5 * BlockSize, y * BlockSize + .5 * BlockSize);
    }
}

function renderGrid(ctx, width, height) {
    ctx.lineWidth = 1;
    ctx.strokeStyle = "black";
    for (var x = 0;x < width;x += BlockSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
        ctx.closePath();
    }
    for (var y = 0;y < height;y += BlockSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
        ctx.closePath();
    }
}

