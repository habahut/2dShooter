{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "ts/source/impl/RoomStandard.ts",
			"settings":
			{
				"buffer_size": 1378,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import {} from \"jasmine\";\nimport { expect } from \"chai\";\n\nimport { Edge } from \"../source/util/Graph\";\nimport { Point } from \"../source/util/Point\";\nimport { HallwayGenerator } from \"../source/levelGeneration/impl/HallwayGenerator\";\nimport { WallFactory } from \"../source/factories/WallFactory\";\nimport { RoomFactory } from \"../source/factories/RoomFactory\";\nimport { WallObjectFactory } from \"../source/factories/WallObjectFactory\";\nimport { DoorType } from \"../source/enums/DoorType\";\nimport { RoomType } from \"../source/enums/RoomType\";\nimport { RoomTestUtil } from \"./util/RoomTestUtil\";\nimport { RoomPath } from \"../source/levelGeneration/interfaces/PathGenerator\";\n\ndescribe (\"HallwayGeneratorTests\", () => {\n    it(\"expands correctly in the vertical\", () => {\n\n\n    }),\n    it(\"expands correctly in the horizontal\", () => {\n    }),\n    it(\"special case: adjacent rooms\", () => {\n        let edge: Edge = new Edge(new Point(0,0), new Point(0,1), 1),\n            wallFactory: WallFactory = new WallFactory(100),\n            roomFactory: RoomFactory = new RoomFactory(100, wallFactory),\n            doorFactory: WallObjectFactory = new WallObjectFactory(100),\n            hallwayGenerator: HallwayGenerator = new HallwayGenerator(3, 1, roomFactory, doorFactory),\n            roomPath: RoomPath = hallwayGenerator.roomWalk(edge),\n            expectedRoomPath: RoomPath = new RoomPath([], [doorFactory.buildDoor(0, 0, 0, 1, DoorType.STANDARD)]);\n        expect(verifyPath(roomPath, expectedRoomPath)).to.equal(true);\n    }),\n    it(\"case 1\", () => {\n        let edge: Edge = new Edge(new Point(0,0), new Point(2, 1), 1),\n            wallFactory: WallFactory = new WallFactory(100),\n            roomFactory: RoomFactory = new RoomFactory(100, wallFactory),\n            doorFactory: WallObjectFactory = new WallObjectFactory(100),\n            hallwayGenerator: HallwayGenerator = new HallwayGenerator(3, 1, roomFactory, doorFactory),\n            expectedRoomPath: RoomPath = new RoomPath(\n                [roomFactory.buildRoom([\n                    new Point(0,0), new Point(1, 0), new Point(2, 0), new Point(2, 1)\n                ], RoomType.STANDARD)],\n                [\n                    doorFactory.buildDoor(0, 0, 1, 0, DoorType.STANDARD), \n                    doorFactory.buildDoor(2, 0, 2, 1, DoorType.STANDARD)\n                ]\n            );\n        expect(verifyPath(hallwayGenerator.roomWalk(edge), expectedRoomPath)).to.equal(true);\n    }),\n    it(\"case 2\", () => {\n        let edge: Edge = new Edge(new Point(3, 3), new Point(-1, 1), 1),\n            wallFactory: WallFactory = new WallFactory(100),\n            roomFactory: RoomFactory = new RoomFactory(100, wallFactory),\n            doorFactory: WallObjectFactory = new WallObjectFactory(100),\n            hallwayGenerator: HallwayGenerator = new HallwayGenerator(3, 1, roomFactory, doorFactory),\n            expectedRoomPath: RoomPath = new RoomPath(\n                [roomFactory.buildRoom([\n                    new Point(3,3), new Point(2, 3), new Point(1, 3), new Point(0, 3),\n                    new Point(0,2), new Point(0, 1), new Point(-1, 1)\n                ], RoomType.STANDARD)],\n                [\n                    doorFactory.buildDoor(3, 3, 2, 3, DoorType.STANDARD), \n                    doorFactory.buildDoor(0, 1, -1, 1, DoorType.STANDARD)\n                ]\n  \n            );\n        expect(verifyPath(hallwayGenerator.roomWalk(edge), expectedRoomPath)).to.equal(true);\n    });\n});\n\n// TODO: this is dumb, there should be a comparable interface that these things can implement so i\n// don't have to keep writing this nonsense for every test.\nfunction verifyPath(path: RoomPath, expectedPath: RoomPath) {\n    if (path.doors.length != expectedPath.doors.length || path.rooms.length != expectedPath.rooms.length) {\n        return false;\n    }\n\n    for (let room of path.rooms) {\n        let found: boolean = false;\n        for (let expectedRoom of expectedPath.rooms) { \n            if (RoomTestUtil.compareRooms(room, expectedRoom)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n\n    for (let door of path.doors) {\n        let found : boolean = false;\n        for (let expectedDoor of expectedPath.doors) {\n            if (door.equals(expectedDoor)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}\n",
			"file": "ts/tests/HallwayGeneratorTest.ts",
			"file_size": 4445,
			"file_write_time": 131592440244352907,
			"settings":
			{
				"buffer_size": 4445,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/source/factories/RoomFactory.ts",
			"settings":
			{
				"buffer_size": 2116,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ts/tests/util/RoomTestUtil.ts",
			"settings":
			{
				"buffer_size": 1142,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 38.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"test",
				"Set Syntax: TypeScript"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 130.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Trevor/Documents/coding-projects/2dShooter",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/imgs",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/enums",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/factories",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/impl",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/interfaces",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/levelGeneration",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests/util"
	],
	"file_history":
	[
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests/LevelGeneratorTest.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/levelGeneration/LevelGenerator.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests/HallwayGeneratorTest.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/compiled-js/source/levelGeneration/LevelGenerator.js",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/factories/RoomScaledObjectFactoryFactory.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/impl/DoorStandard.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests/DoorFactoryTest.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/factories/DoorFactory.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/impl/RoomStandard.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/interfaces/Room.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests/RoomFactoryTest.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/factories/RoomFactory.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/impl/WallStandard.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests/WallFactoryTest.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/util/XYMap.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/factories/WallFactory.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/interfaces/Wall.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/compiled-js/source/util/XYMap.js",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/enums/Orientation.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/enums/WallOrientation.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/tests/XYMapsTest.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/source/interfaces/Door.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/interfaces/Room.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/interfaces/Renderable.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/DoorFactory.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/DoorStandard.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/RoomFactory.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/DoorType.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/enums/RoomType.ts",
		"/C/Users/Trevor/AppData/Roaming/Sublime Text 3/Packages/User/ActualVim.sublime-settings",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/2dShooter.sublime-project",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/Point.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/Door.ts",
		"/C/Users/Trevor/Documents/coding-projects/2dShooter/ts/Door.js"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"r"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ts/source/impl/RoomStandard.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1378,
						"regions":
						{
						},
						"selection":
						[
							[
								366,
								366
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ts/tests/HallwayGeneratorTest.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4445,
						"regions":
						{
						},
						"selection":
						[
							[
								341,
								341
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ts/source/factories/RoomFactory.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2116,
						"regions":
						{
						},
						"selection":
						[
							[
								1541,
								1541
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ts/tests/util/RoomTestUtil.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1142,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "2dShooter.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"roomfactorytest.ts",
				"ts\\tests\\RoomFactoryTest.ts"
			],
			[
				"xymap.ts",
				"ts\\source\\util\\XYMap.ts"
			],
			[
				"xymap",
				"compiled-js\\source\\util\\XYMap.js"
			],
			[
				"wallfactorytest.ts",
				"ts\\tests\\WallFactoryTest.ts"
			],
			[
				"roomstandard.ts",
				"ts\\source\\impl\\RoomStandard.ts"
			],
			[
				"doorstandard.ts",
				"ts\\source\\impl\\DoorStandard.ts"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 516.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 324.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
